
var Canvas = require('canvas');
var raf = require('raf');

module.exports = function(width, height) {
    var Event = function() {
        this.preventDefault = function(){};
        this.keyCode = this.keyCode || 0;
        this.type = this.type || "empty";
    }
    var evListener = function(action, callback, r) {
        if(events[action] instanceof Array)
            events[action].push(callback);
        else
            events[action] = [callback];
    };
    var scope = this;
    this.__elements = [];
    var events = {};
    this.document = {
        getElementById: function(id) {
            var el = false;
            for(var i in scope.__elements)
                if(scope.__elements[i].id == id)
                    return scope.__elements[i];
            if(el === false && typeof(id) == "string" && id.length > 0) {
                el = new scope.DOMElement();
                el.id = id;
                scope.__elements.push(el);
            }
            return el;
        },
        createElement: function (type) {
            var el = new scope.DOMElement();//new Canvas(scope.innerWidth, scope.innerHeight);
            // el.type = type;
            scope.__elements.push(el);
            return el;//Object.create(scope.DOMElement);
        },
        addEventListener: evListener
    };
    
    this.Image = Canvas.Image;
    this.Image.addEventListener = evListener;
    this.Canvas = Canvas;
    this.Audio = function() {
        this.canPlayType = function(type) {return false;};
        this.addTextTrack = function() {};
        this.play = function() {};
        this.pause = function() {};
        this.load = function() {};
        this.addEventListener = evListener;
    };
    this.AudioContext = function() {
        
    };
    this.DOMElement = function () {
        this.canvas = new Canvas(scope.innerWidth, scope.innerHeight);
        scope.Audio.call(this.canvas);
        var s = this;
        this.getContext = function(mode) {
            return s.canvas.getContext(mode);
        };
        this.canvas.addEventListener = this.addEventListener = evListener;
        this.canvas.style = {};
        return this.canvas;
    };
    this.GaaSdo = function (action, event) {
        Event.apply(event);
        if(typeof (scope.document['on' + action]) === "function")
            scope.document['on' + action](event);
        if(events[action] instanceof Array)
            for(var i = 0; i < events[action].length; i++)
                events[action][i](event);
        for(var i = 0; i < scope.__elements.length; i++)
            if(typeof (scope.__elements[i]['on' + action]) == "function") {
                scope.__elements[i]['on' + action](event);
            }
    };
    this.DOMElement.prototype.width = width;
    this.DOMElement.prototype.height = height;
    this.DOMElement.prototype.style = {};
    this.window = this;
    this.addEventListener = evListener;
    this.innerHeight = height;
    this.innerWidth = width;
    this.screen = {width: width, height: height};
    this.performance = {};
};
module.exports.prototype = {
    requestAnimationFrame: raf,
    setTimeout: setTimeout,
    setInterval: setInterval,
    navigator: {
        userAgent: "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36"
    },
    location: {href: '/', reload: function() {}, history: {}}
};
module.exports.prototype.do = function(action, event) {
    this.GaaSdo(action, event);
};