var cp = module.require('child_process');
var fs = module.require("fs");

function runUnsafeScript(script, callback) {
    if(typeof script == "string")
        script = [script];
    else if(!(script instanceof Array))
        throw new Error("script not executable code");
    var child = cp.fork(__dirname + '/runGameInNewContext', script);
    
    child.on('message', function(m) {
        // Receive results from child process
        callback(null, m);
    });
    // child.stdout.on('data', function(data) {
    //     console.log("tmp process says: " + data);
    // });
    
    child.on('exit', function (code, signal) {
        callback(new Error(code), true);
    });
    
    child.on('error', function (err) {
        callback(err, false);
    });
    
    // Send child process some work
    // child.send({t:'First Fun'});
    
    
    // setTimeout(function killOnTimeOut() {
    //     child.kill();
    //     callback(new Error("Timeout"), false);
    // }, 5000);
    return child;
}
// runUnsafeScript("sendResult('inside another process');", function (err, response) {
//     console.log("back in our process: " + err + "," + response);
//     process.exit(0);
// })

module.exports = {
    runInNewProcess: function (game) {
        var updateEventHandles = [];
        var inputEventHandles = [];
        var errorEventHandles = [];
        var worker = runUnsafeScript(
            JSON.stringify({
                sourcePath: game.path, 
                width: game.width, 
                height: game.height
            }), 
            function (err, response) {
                if(err === null) for(var i = 0; i < updateEventHandles.length; i++)
                    updateEventHandles[i](response);
                else for(var i = 0; i < errorEventHandles.length; i++)
                    errorEventHandles[i](err, response);
            }
        );
        var comunicationObject = {
            on: function(action, callback) {
                if(action == 'update')
                    updateEventHandles.push(callback);
                else if(action == 'input')
                    inputEventHandles.push(callback);
                else if(action == 'error')
                    errorEventHandles.push(callback);
            },
            exit: function() {
                worker.kill();
                // delete(comunicationObject);
                // delete(worker);
            },
            do: function(event) {
                worker.send(event);
            }
        };
        
        
        return comunicationObject;
    }
};