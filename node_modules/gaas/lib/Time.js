var version = "1";
var gameName = ""; // mario
var metric = ""; // CompressionRatio, ServerLatency, PacketSize, FPS
var params = {
    q: 0.6,
    g: 1,
    w: 0
   // Quality=q, gamers=g and watcher=w 
};
function getParamString(params) {
        var paramStr = "";
        for(var param in params) {
            paramStr += param + params[param];
        }
        return paramStr;
};

var clocks = {};
var counts = {};

module.exports = {
    start: function(name) {
        if(typeof clocks[name] == "undefined")
            clocks[name] = {};
        var newInstance = {
            startTime: new Date().getTime(),
            endTime: null
        };
        if(clocks[name].instances instanceof Array)
            clocks[name].instances.push(newInstance);
        else clocks[name].instances = [newInstance];
        clocks[name].sum = (clocks[name].sum || 0);
        return clocks[name];
    },
    stop: function(name) {
        var clock = clocks[name];
        var endInstance = clock.instances[clock.instances.length-1];
        endInstance.endTime = new Date().getTime();
        clock.sum = (clock.sum || 0) + (endInstance.endTime - endInstance.startTime);
    },
    count: function(name, value) {
        var newInstance =  {
            value: value,
            time: new Date.getTime()
        };
        if(counts[name] instanceof Array)
            counts[name].push(newInstance);
        else counts[name] = [newInstance];
    },
    getParamString: getParamString,
    getFileName: function(gameName, metric, params) {
        return gameName + metric + getParamString(params) + version + ".dat";
    },
    
    storeMeasureTime: function(name, other) {
        var fs = require('fs');
        var clock = clocks[name];
        var wstream = fs.createWriteStream(__dirname + '/' + name, {flags: (clock.hasBeenCalled != true ? 'w' : 'a')});
        wstream.write(other + ' ' + (clock.sum / clock.instances.length) + "\n");
        clock.sum = 0;
        clock.instances = [];
        clock.hasBeenCalled = true;
    },
    storeMeasureCount: function(name) {
        var fs = require('fs');
        var count = counts[name];
        var wstream = fs.createWriteStream(__dirname + '/' + name, {flags: (count.hasBeenCalled != true ? 'w' : 'a')});
        for(var i in count)
            wstream.write(count[i].time + ' ' + count[i].value + "\n");
        counts[name] = [];
        counts[name].hasBeenCalled = true;
    }
};