var fs = module.require("fs");
var vm = module.require("vm");
var processManager = module.require("./processManager");

var meta = {games:[]};//JSON.parse(fs.readFileSync('./game-meta.json', 'utf8'));
// var obj;
// fs.readFile('file', 'utf8', function (err, data) {
//   if (err) throw err;
//   obj = JSON.parse(data);
// });

// var requestAnimFrame = require("window.requestAnimationFrame");

function readSourceFiles(path, callback) {
    fs.readdir(path + '/source', function (err, files) {
        if (err) throw err;
        var src = [];
        var nonJSFileCount = 0;
        for(var i = 0; i < files.length; i++) {
            var srcName = files[i];
            
            if(srcName.indexOf('.') == -1) {
                nonJSFileCount++;
                continue;
            }
            var postFix = srcName.substr(srcName.lastIndexOf(".")+1);
            if(postFix != 'js' && postFix != 'json') {
                nonJSFileCount++;
                continue;
            }
            fs.readFile(path + '/source/' + srcName, function (err, data) {
                if(err) throw err;
                src.push({name: srcName, data: data});
                if(src.length + nonJSFileCount >= files.length && typeof(callback) == "function")
                    callback(src);
            });
        }
    });
}
function findGame(meta, gameId) {
    
    if(typeof(gameId) == "object") {
        if(validateGame(gameId))
            return gameId;
        if(typeof(gameId.id) == "number")
            gameId = gameId.id;
        if(typeof(gameId.slug) == "string")
            gameId = gameId.slug;
    }
    if(typeof(gameId) === "string") {
        for(var i = 0; i < meta.games.length; i++)
            if(meta.games[i].slug === gameId)
                return meta.games[i];
    }
    else if(typeof(gameId) === "number") {
        for(var i = 0; i < meta.games.length; i++)
            if(meta.games[i].id === gameId)
                return meta.games[i];
    }
    else return null;
    return false;
}
function validateGame (game) {
    return typeof(game) === "object"
        && typeof(game.path) === "string" 
        && typeof(game.name) === "string"
        && typeof(game.slug) === "string"
        && typeof(game.id) === "number";
}
for(var i = 0; i < meta.games.length; i++) {
    if(!validateGame(meta.games[i])) {
        meta.games.splice(i, 1);
        i--;
    }
}
var DOM = require("./DOM");

var gamesRunning = [];

module.exports = {
    createNewGame: function (config, callback) {
        var gameToPlay;
        gameToPlay = findGame(meta, config);
        
        if(gameToPlay == false) throw new Error("No game specified: " + config);
        if(gameToPlay == null) throw new Error("No game found for: " + config);
        
        var filePath = gameToPlay.path;
        var updateEventHandles = [];
        var startEventHandles = [];
        var stopEventHandles = [];
        var currentDOM = new DOM();
        var currentDir = false;
        var gameObject = {
            canvas: null,//currentDOM.document.createElement('canvas'),
            scope: currentDOM,
            sources: [],
            startGame: function (socket) {
                if(currentDir !== false) 
                    throw new Error("A game of this instance is already running");
                for(var i = 0; i < gamesRunning.length; i++)
                    if(gamesRunning[i].socket === socket) {
                        gamesRunning[i].worker.exit();
                        gamesRunning.splice(i,1);
                        i--;
                    }
                if(config.separateProcess !== false) {
                    console.log("Game started: " + gameToPlay.name);
                    var worker = processManager.runInNewProcess(gameToPlay);
                    worker.on('update', function(data) {
                        // TODO: check if canvasIdentirifer is present in meta data of the game
                        // gameObject.canvas = data.canvas; 
                        if(data.what == 'gameStart') {
                            callback(gameObject);
                        }
                        else if(data.what == 'frame') {
                            for(var i = 0; i < updateEventHandles.length; i++)
                                updateEventHandles[i](data.delta, data.canvasData);
                        }
    					
                    });
                    worker.on('error', function(err, response) {
                        for(var i = 0; i < gamesRunning.length; i++)
                            if(gamesRunning[i].socket === socket 
                                  && gamesRunning[i].worker === worker) {
                                console.log("Terminate game: " + gamesRunning[i].name);
                                console.log("Cause: ", err);
                                gamesRunning[i].worker.exit();
                                gamesRunning.splice(i,1);
                                i--;
                            }
                    });
                    gamesRunning.push({socket: socket, worker: worker, name: gameToPlay.name});
                }
                else throw new Error("Non new process running of games not supported anymore!");
        //         else {
        //             currentDir = process.cwd();
        //             process.chdir(currentDir + '/' + filePath + '/source');
        //             for(var i = 0; i < this.sources.length; i++) {
        //                 vm.runInNewContext(this.sources[i].data, this.scope, 'game.vm');
        //             }
        //             // process.chdir(currentDir);
        //             var initScript = fs.readFileSync('../init.js', 'utf8');
        //             vm.runInNewContext(initScript, gameObject.scope, 'game.vm');
                    
        //             // Start the game
        //             for(var i = 0; i < startEventHandles.length; i++)
        //                 startEventHandles[i](gameObject.scope);
                    
                        
        // 			var t = 0;
        // 			var ticksPerSecond = 1000 / 20; // ms / fps
        // 			var lastRenderedFrame = 0;
        //             (function gameLoop(timelapsed) {
        // 				var delta = timelapsed - lastRenderedFrame;
        // 				if(ticksPerSecond < delta) {
        //                     if(gameObject.canvas === null && gameObject.scope.__elements.length > 0)
        //                         gameObject.canvas = gameObject.scope.__elements[0]; // TODO: check if canvasIdentirifer is present in meta data of the game
        //                     for(var i = 0; i < updateEventHandles.length; i++)
        //                         updateEventHandles[i](gameObject.scope, delta);
        // 					lastRenderedFrame = timelapsed;
        // 				}
        //                 // console.log(gameObject.canvas);
        //                 currentDOM.requestAnimationFrame(gameLoop);
        //             })();
        //         }
            },
            stopGame: function (socket) {
                
                for(var i = 0; i < gamesRunning.length; i++)
                    if(gamesRunning[i].socket === socket) {
                        console.log("Terminate game: " + gamesRunning[i].name);
                        console.log("Cause: terminated socket connection");
                        gamesRunning[i].worker.exit();
                        gamesRunning.splice(i,1);
                        i--;
                    }
                // throw new Error("Not implemented error!");
                // process.chdir(currentDir);
                // currentDir = false;
                // for(var i = 0; i < stopEventHandles.length; i++)
                //     stopEventHandles[i](gameObject.scope);
            },
            on: function (event, callback) {
                if(event == 'update')
                    updateEventHandles.push(callback);
                if(event == 'start')
                    startEventHandles.push(callback);
                if(event == 'stop')
                    stopEventHandles.push(callback);
            },
            do: function (socket, event) {
                for(var i = 0; i < gamesRunning.length; i++) {
                    if(gamesRunning[i].socket === socket) {
                        gamesRunning[i].worker.do(event);
                    }
                }
                // this.scope.do(action, event);
            } 
        };
        
        return gameObject;
    },
    getGamesDataFromFile: function (fileName) {
        var tmpMeta = JSON.parse(fs.readFileSync(fileName, 'utf8'));
        for(var i in tmpMeta.games)
            meta.games.push(tmpMeta.games[i]);
    },
    addGame: function (gameConfig) {
        if(!validateGame(gameConfig))
            throw new Error("Invalid game: " + gameConfig);
        var newGame = {};
        newGame.id = parseInt(Math.random() * 1000, 10);
        newGame.path = gameConfig.path;
        newGame.name = gameConfig.name;
        newGame.slug = gameConfig.slug;
        meta.games.push(newGame);
    },
    removeGame: function (id) {
        for(var i = 0; i < meta.games.length; i++)
            if(meta.games[i].id === id || meta.games[i].slug === id) {
                meta.games.splice(i, 1);
                break;
            }
    },
    getControls: function(game) {
        var game = findGame(meta, game);
        if(game) return {
            keyboardEvents: game.controls, 
            mouseEvents: {
                mousedown: game.mousedown, 
                mouseup: game.mouseup, 
                click: game.mouseclick, 
                mousemove: game.mousemove
            }
        };
    }
};